package com.rest.oauth2.config;

import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.lang.NonNull;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.client.OAuth2AuthorizeRequest;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import java.io.IOException;
import java.util.Objects;

public class OAuthClientCredentialsRestTemplateInterceptor implements ClientHttpRequestInterceptor {

  private final OAuth2AuthorizedClientManager manager;
  private final ClientRegistration clientRegistration;

  public OAuthClientCredentialsRestTemplateInterceptor(
      OAuth2AuthorizedClientManager manager, ClientRegistration clientRegistration) {
    this.manager = manager;
    this.clientRegistration = clientRegistration;
  }

  @Override
  public @NonNull ClientHttpResponse intercept(
      @NonNull HttpRequest request,
      @NonNull byte[] body,
      @NonNull ClientHttpRequestExecution execution)
      throws IOException {

    final Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    final OAuth2AuthorizeRequest oAuth2AuthorizeRequest =
        OAuth2AuthorizeRequest.withClientRegistrationId(clientRegistration.getRegistrationId())
            .principal("principal")
            .build();
    final OAuth2AuthorizedClient client = manager.authorize(oAuth2AuthorizeRequest);
    if (Objects.isNull(client)) {
      throw new IllegalStateException(
          "client credentials flow on "
              + clientRegistration.getRegistrationId()
              + " failed, client is null");
    }

    request.getHeaders().setBearerAuth(client.getAccessToken().getTokenValue());
    return execution.execute(request, body);
  }
}
